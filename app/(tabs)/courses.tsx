import { useEffect, useState } from 'react';
import { View, FlatList, ActivityIndicator, StyleSheet } from 'react-native';
import { Text, SegmentedButtons } from 'react-native-paper';
import { useRouter } from 'expo-router';
import CourseCard from '../../components/CourseCard';
import { getAllCourses } from '../../api/courses';
import { useUserStore } from '../../store/user';

export default function CoursesScreen() {
  const router = useRouter();
  const { user } = useUserStore();
  const [courses, setCourses] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [selectedLevel, setSelectedLevel] = useState<string>('all');

  useEffect(() => {
    getAllCourses()
      .then(setCourses)
      .finally(() => setLoading(false));
  }, []);

  if (loading) return <ActivityIndicator style={styles.loading} />;

  const userLevel = user?.difficulty?.toLowerCase() || '';

  const levelMap = {
    'easy': '–ñ–µ“£—ñ–ª',
    'medium': '–û—Ä—Ç–∞—à–∞',
    'hard': '“ö–∏—ã–Ω',
  };

  const filteredByUser = courses.filter(
    c => c.difficulty?.toLowerCase().includes(userLevel)
  );

  const visibleCourses = selectedLevel === 'all'
    ? courses
    : courses.filter((c) =>
        c.difficulty?.toLowerCase().includes(selectedLevel)
      );

  return (
    <View style={styles.container}>
      <Text variant="headlineSmall" style={styles.title}>üìö –ö—É—Ä—Å—Ç–∞—Ä</Text>

      <Text style={styles.section}>‚úÖ –°—ñ–∑–¥—ñ“£ –¥–µ“£–≥–µ–π—ñ“£—ñ–∑–≥–µ —Å–∞–π</Text>
      <FlatList
        data={filteredByUser}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <CourseCard
            title={item.title}
            description={item.description}
            image={item.imageUrl}
            level={item.difficulty}
            lessonCount={item.lessons?.length || 0}
            onPress={() => router.push(`/lessons/${item.id}`)}
          />
        )}
        ListEmptyComponent={<Text style={styles.empty}>–°”ô–π–∫–µ—Å –∫—É—Ä—Å—Ç–∞—Ä —Ç–∞–±—ã–ª–º–∞–¥—ã</Text>}
      />

      <Text style={styles.section}>üìò –ö—É—Ä—Å—Ç–∞—Ä –¥–µ“£–≥–µ–π –±–æ–π—ã–Ω—à–∞</Text>
      <SegmentedButtons
        value={selectedLevel}
        onValueChange={setSelectedLevel}
        buttons={[
          { label: '–ë–∞—Ä–ª—ã“ì—ã', value: 'all' },
          { label: '–ñ–µ“£—ñ–ª', value: '–∂–µ“£—ñ–ª' },
          { label: '–û—Ä—Ç–∞—à–∞', value: '–æ—Ä—Ç–∞—à–∞' },
          { label: '“ö–∏—ã–Ω', value: '“õ–∏—ã–Ω' },
        ]}
        style={{ marginBottom: 8 }}
      />

      <FlatList
        data={visibleCourses}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <CourseCard
            title={item.title}
            description={item.description}
            image={item.imageUrl}
            level={item.difficulty}
            lessonCount={item.lessons?.length || 0}
            onPress={() => router.push(`/lessons/${item.id}`)}
          />
        )}
        ListEmptyComponent={<Text style={styles.empty}>–ö—É—Ä—Å—Ç–∞—Ä —Ç–∞–±—ã–ª–º–∞–¥—ã</Text>}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, paddingTop: 16, paddingHorizontal: 12 },
  title: { textAlign: 'center', marginBottom: 8 },
  section: { marginVertical: 12, fontWeight: 'bold', fontSize: 16 },
  empty: { color: '#9CA3AF', textAlign: 'center', marginVertical: 8 },
  loading: { marginTop: 64 },
});
